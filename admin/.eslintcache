[{"/Volumes/Samsung T5/Projects/popcorn/admin/src/index.js":"1","/Volumes/Samsung T5/Projects/popcorn/admin/src/App.js":"2","/Volumes/Samsung T5/Projects/popcorn/admin/src/reportWebVitals.js":"3","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Header.js":"4","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Footer.js":"5","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/FormContainer.js":"6","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Message.js":"7","/Volumes/Samsung T5/Projects/popcorn/admin/src/firebase.js":"8","/Volumes/Samsung T5/Projects/popcorn/admin/src/store.js":"9","/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/refreshmentReducers.js":"10","/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/refreshmentConstants.js":"11","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/Homepage.js":"12","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/HomePage.js":"13","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentListPage.js":"14","/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/refreshmentActions.js":"15","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Loader.js":"16","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentAddPage.js":"17","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentEditPage.js":"18","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieListPage.js":"19","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieAddPage.js":"20","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieEditPage.js":"21","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllMoviesPane.js":"22","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/CurrentMoviesPane.js":"23","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastMoviesPane.js":"24","/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/movieReducers.js":"25","/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/movieConstants.js":"26","/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/movieActions.js":"27","/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Rating.js":"28","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/EmployeeListPage.js":"29","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/EmployeeAddPage.js":"30","/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/employeeReducers.js":"31","/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/employeeConstants.js":"32","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllEmployeesPane.js":"33","/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/employeeActions.js":"34","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/CurrentEmployeesPane.js":"35","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastEmployeesPane.js":"36","/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/showReducers.js":"37","/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/showConstants.js":"38","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowListPage.js":"39","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllShowsPane.js":"40","/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/showActions.js":"41","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/FutureShowsPane.js":"42","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastShowsPane.js":"43","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowEditPage.js":"44","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowAddPage.js":"45","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/InfectedPage.js":"46","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ReportsPage.js":"47","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/ProfitsPane.js":"48","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/MovieWisePane.js":"49","/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/FlavourWisePane.js":"50"},{"size":389,"mtime":1609738790000,"results":"51","hashOfConfig":"52"},{"size":2108,"mtime":1610273614000,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":1609668545000,"results":"54","hashOfConfig":"52"},{"size":1941,"mtime":1610269887000,"results":"55","hashOfConfig":"52"},{"size":307,"mtime":1609679290000,"results":"56","hashOfConfig":"52"},{"size":331,"mtime":1609679359000,"results":"57","hashOfConfig":"52"},{"size":284,"mtime":1609853356000,"results":"58","hashOfConfig":"52"},{"size":580,"mtime":1609681698000,"results":"59","hashOfConfig":"52"},{"size":2504,"mtime":1610284857000,"results":"60","hashOfConfig":"52"},{"size":2532,"mtime":1609766860000,"results":"61","hashOfConfig":"52"},{"size":1015,"mtime":1609740373000,"results":"62","hashOfConfig":"52"},{"size":151,"mtime":1609741434000,"results":"63","hashOfConfig":"52"},{"size":151,"mtime":1609741434000,"results":"64","hashOfConfig":"52"},{"size":2593,"mtime":1609955440000,"results":"65","hashOfConfig":"52"},{"size":3409,"mtime":1609766876000,"results":"66","hashOfConfig":"52"},{"size":384,"mtime":1609679305000,"results":"67","hashOfConfig":"52"},{"size":4048,"mtime":1609746907000,"results":"68","hashOfConfig":"52"},{"size":3865,"mtime":1609767205000,"results":"69","hashOfConfig":"52"},{"size":1496,"mtime":1609777178000,"results":"70","hashOfConfig":"52"},{"size":9380,"mtime":1609865022000,"results":"71","hashOfConfig":"52"},{"size":4293,"mtime":1609868134000,"results":"72","hashOfConfig":"52"},{"size":1532,"mtime":1609955331000,"results":"73","hashOfConfig":"52"},{"size":2527,"mtime":1609955362000,"results":"74","hashOfConfig":"52"},{"size":2166,"mtime":1609955403000,"results":"75","hashOfConfig":"52"},{"size":4655,"mtime":1610284833000,"results":"76","hashOfConfig":"52"},{"size":1863,"mtime":1610284710000,"results":"77","hashOfConfig":"52"},{"size":6878,"mtime":1610285008000,"results":"78","hashOfConfig":"52"},{"size":1608,"mtime":1610104989000,"results":"79","hashOfConfig":"52"},{"size":1553,"mtime":1609955435000,"results":"80","hashOfConfig":"52"},{"size":8441,"mtime":1609945552000,"results":"81","hashOfConfig":"52"},{"size":3474,"mtime":1610270553000,"results":"82","hashOfConfig":"52"},{"size":1401,"mtime":1610270378000,"results":"83","hashOfConfig":"52"},{"size":1854,"mtime":1610270167000,"results":"84","hashOfConfig":"52"},{"size":4635,"mtime":1610271736000,"results":"85","hashOfConfig":"52"},{"size":2242,"mtime":1610269827000,"results":"86","hashOfConfig":"52"},{"size":2201,"mtime":1610269836000,"results":"87","hashOfConfig":"52"},{"size":3746,"mtime":1610025199000,"results":"88","hashOfConfig":"52"},{"size":1439,"mtime":1609958710000,"results":"89","hashOfConfig":"52"},{"size":1483,"mtime":1609956176000,"results":"90","hashOfConfig":"52"},{"size":1482,"mtime":1610030524000,"results":"91","hashOfConfig":"52"},{"size":4826,"mtime":1609958773000,"results":"92","hashOfConfig":"52"},{"size":2302,"mtime":1610030493000,"results":"93","hashOfConfig":"52"},{"size":1610,"mtime":1610030481000,"results":"94","hashOfConfig":"52"},{"size":3908,"mtime":1610130048000,"results":"95","hashOfConfig":"52"},{"size":5495,"mtime":1610027573000,"results":"96","hashOfConfig":"52"},{"size":1534,"mtime":1610273398000,"results":"97","hashOfConfig":"52"},{"size":1360,"mtime":1610284791000,"results":"98","hashOfConfig":"52"},{"size":1656,"mtime":1610274907000,"results":"99","hashOfConfig":"52"},{"size":4210,"mtime":1610285277000,"results":"100","hashOfConfig":"52"},{"size":5417,"mtime":1610285247000,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"z8duet",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"/Volumes/Samsung T5/Projects/popcorn/admin/src/index.js",[],["206","207"],"/Volumes/Samsung T5/Projects/popcorn/admin/src/App.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/reportWebVitals.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Header.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Footer.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/FormContainer.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Message.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/firebase.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/store.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/refreshmentReducers.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/refreshmentConstants.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/Homepage.js",[],["208","209"],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/HomePage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentListPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/refreshmentActions.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Loader.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentAddPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/RefreshmentEditPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieListPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieAddPage.js",["210"],"import React, { useState } from 'react'\nimport { Button, Form, ProgressBar } from 'react-bootstrap'\nimport FormContainer from '../components/FormContainer'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { projectStorage } from '../firebase'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { addMovie } from '../actions/movieActions'\n\nconst MovieAddPage = () => {\n  const [file, setFile] = useState(null)\n  const [progress, setProgress] = useState(0)\n  const [uploadError, setUploadError] = useState(null)\n  const [name, setName] = useState('')\n  const [runtime, setRuntime] = useState(0)\n  const [genres, setGenres] = useState([])\n  const [values, setValues] = useState([])\n  const [releaseDate, setReleaseDate] = useState(new Date())\n  const [director, setDirector] = useState('')\n  const [writers, setWriters] = useState('')\n  const [actors, setActors] = useState('')\n  const [desc, setDesc] = useState('')\n  const [isAdult, setIsAdult] = useState(false)\n  const [message, setMessage] = useState(null)\n\n  const types = ['image/png', 'image/jpeg']\n\n  const dispatch = useDispatch()\n  const movieAdd = useSelector(state => state.movieAdd)\n  const { loading, success, error } = movieAdd\n\n  const options = [\n    { id: 1, text: 'Action', value: 'Action' },\n    { id: 2, text: 'Adventure', value: 'Adventure' },\n    { id: 3, text: 'Comedy', value: 'Comedy' },\n    { id: 4, text: 'Crime', value: 'Crime' },\n    { id: 5, text: 'Drama', value: 'Drama' },\n    { id: 6, text: 'Fantasy', value: 'Fantasy' },\n    { id: 7, text: 'Historical', value: 'Historical' },\n    { id: 8, text: 'Horror', value: 'Horror' },\n    { id: 9, text: 'Magical', value: 'Magical' },\n    { id: 10, text: 'Mystery', value: 'Mystery' },\n    { id: 11, text: 'Paranoid Fiction', value: 'Paranoid Fiction' },\n    { id: 12, text: 'Philosophical', value: 'Philosophical' },\n    { id: 13, text: 'Political', value: 'Political' },\n    { id: 14, text: 'Romance', value: 'Romance' },\n    { id: 15, text: 'Saga', value: 'Saga' },\n    { id: 16, text: 'Satire', value: 'Satire' },\n    { id: 17, text: 'Science Fiction', value: 'Science Fiction' },\n    { id: 18, text: 'Social', value: 'Social' },\n    { id: 19, text: 'Speculative', value: 'Speculative' },\n    { id: 20, text: 'Thriller', value: 'Thriller' },\n    { id: 21, text: 'Urban', value: 'Urban' },\n    { id: 22, text: 'Western', value: 'Western' },\n  ]\n\n  const isFormEmpty = () => {\n    return (\n      !name.length ||\n      runtime === 0 ||\n      !genres.length ||\n      !director.length ||\n      !writers.length ||\n      !actors.length ||\n      !desc.length\n    )\n  }\n\n  const isValidReleaseDate = () => {\n    const today = new Date()\n    if (today.getFullYear() < releaseDate.getFullYear()) {\n      return false\n    } else if (today.getFullYear() > releaseDate.getFullYear()) {\n      return true\n    } else {\n      if (today.getMonth() < releaseDate.getMonth()) {\n        return false\n      } else if (today.getMonth() > releaseDate.getMonth()) {\n        return true\n      } else {\n        if (today.getDate() < releaseDate.getDate()) {\n          return false\n        } else {\n          return true\n        }\n      }\n    }\n  }\n\n  const isFormValid = () => {\n    if (isFormEmpty()) {\n      setMessage('Please fill out all fields')\n      return false\n    } else if (!isValidReleaseDate()) {\n      setMessage('Please enter an appropriate release date')\n      return false\n    } else {\n      return true\n    }\n  }\n\n  const getFormattedDate = date => {\n    const d = new Date(date)\n    let month = '' + (d.getMonth() + 1)\n    let day = '' + d.getDate()\n    let year = d.getFullYear()\n    if (month.length < 2) {\n      month = '0' + month\n    }\n    if (day.length < 2) {\n      day = '0' + day\n    }\n    return [year, month, day].join('-')\n  }\n\n  const submitHandler = e => {\n    e.preventDefault()\n\n    if (isFormValid() && file) {\n      setMessage(null)\n      const released = getFormattedDate(releaseDate)\n      const year = released.slice(0, 4)\n      const cast = actors.split(',')\n      const writer = writers.split(',')\n      for (let i = 1; i < cast.length; i++) {\n        cast[i] = cast[i].slice(1, cast[i].length)\n      }\n      for (let i = 1; i < writer.length; i++) {\n        writer[i] = writer[i].slice(1, writer[i].length)\n      }\n      const storageRef = projectStorage.ref(file.name)\n      storageRef.put(file).on(\n        'state_changed',\n        snap => {\n          let percentage = (snap.bytesTransferred / snap.totalBytes) * 100\n          setProgress(percentage)\n        },\n        err => {\n          setUploadError(err)\n        },\n        async () => {\n          const url = await storageRef.getDownloadURL()\n          dispatch(\n            addMovie(\n              name,\n              url,\n              year,\n              runtime,\n              genres,\n              released,\n              director,\n              isAdult,\n              writer,\n              cast,\n              desc\n            )\n          )\n        }\n      )\n    }\n  }\n\n  const handleFileUpload = e => {\n    let selected = e.target.files[0]\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected)\n      setMessage(null)\n    } else {\n      setFile(null)\n      setMessage('Please select an image of .png or .jpeg format')\n    }\n  }\n  return (\n    <FormContainer>\n      <h3>Add movie</h3>\n      {loading && <Loader />}\n      {error && <Message>{error}</Message>}\n      {success && <Message variant=\"success\">Successfully added movie</Message>}\n      {message && <Message>{message}</Message>}\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"name\">\n          <Form.Label>Movie name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={name}\n            placeholder=\"Enter the movie name\"\n            onChange={e => setName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"runtime\">\n          <Form.Label>Movie Runtime</Form.Label>\n          <Form.Control\n            type=\"number\"\n            value={runtime}\n            placeholder=\"Enter the movie runtime\"\n            onChange={e => setRuntime(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"released\">\n          <Form.Label>Release Date</Form.Label>\n          <br />\n          <DatePicker\n            selected={releaseDate}\n            onChange={date => setReleaseDate(date)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"genres\">\n          <Form.Label>Select the movie genres</Form.Label>\n          <Form.Control\n            as=\"select\"\n            multiple\n            value={values}\n            onChange={e => {\n              const value = e.target.value\n              const index = values.indexOf(value)\n              if (index > -1) {\n                values.splice(index, 1)\n              } else {\n                values.push(value)\n              }\n              setGenres(values)\n            }}\n          >\n            {options.map(option => (\n              <option key={option.id}>{option.text}</option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"directors\">\n          <Form.Label>Movie Director(s)</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={director}\n            placeholder=\"Enter the director name\"\n            onChange={e => setDirector(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"writers\">\n          <Form.Label>Movie Writer(s)</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={writers}\n            placeholder=\"Enter the writer(s) name/names\"\n            onChange={e => setWriters(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"actors\">\n          <Form.Label>Movie Cast</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={actors}\n            placeholder=\"Enter the actor(s) name/names\"\n            onChange={e => setActors(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"desc\">\n          <Form.Label>Description</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={4}\n            value={desc}\n            onChange={e => setDesc(e.target.value)}\n            placeholder=\"Enter the movie description\"\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"isAdult\">\n          <Form.Label>Is movie Adult rated? </Form.Label>\n          <Form.Check\n            type=\"checkbox\"\n            label=\"Yes\"\n            checked={isAdult}\n            onChange={e => setIsAdult(e.target.checked)}\n          ></Form.Check>\n        </Form.Group>\n        <Form.Group controlId=\"image\">\n          <Form.Label>Sample Poster</Form.Label>\n          <Form.File onChange={handleFileUpload}></Form.File>\n        </Form.Group>\n        <ProgressBar variant=\"success\" now={progress}></ProgressBar>\n        {uploadError && <Message>Error uploading poster to firebase</Message>}\n        <Button type=\"submit\" variant=\"primary\" className=\"my-3\">\n          Add Movie\n        </Button>\n      </Form>\n    </FormContainer>\n  )\n}\n\nexport default MovieAddPage\n","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/MovieEditPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllMoviesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/CurrentMoviesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastMoviesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/movieReducers.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/movieConstants.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/movieActions.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/components/Rating.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/EmployeeListPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/EmployeeAddPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/employeeReducers.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/employeeConstants.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllEmployeesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/employeeActions.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/CurrentEmployeesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastEmployeesPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/reducers/showReducers.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/constants/showConstants.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowListPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/AllShowsPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/actions/showActions.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/FutureShowsPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/PastShowsPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowEditPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ShowAddPage.js",["211"],"import React, { useEffect, useState } from 'react'\nimport { Button, Form } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listCurrentMoviesForShows } from '../actions/showActions'\nimport FormContainer from '../components/FormContainer'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { createShow } from '../actions/showActions'\n\nconst ShowAddPage = () => {\n  const [val, setVal] = useState('')\n  const [success, setSuccess] = useState(false)\n  const [message, setMessage] = useState(null)\n  const [ticketCount, setTicketCount] = useState(0)\n  const [ticketPrice, setTicketPrice] = useState(0)\n  const [initialDate, setInitialDate] = useState(new Date())\n\n  const dispatch = useDispatch()\n  const showListCurrentMovies = useSelector(\n    state => state.showListCurrentMovies\n  )\n  const { error, success: listSuccess, currentMovies } = showListCurrentMovies\n\n  const showCreate = useSelector(state => state.showCreate)\n  const { loading, error: createError } = showCreate\n\n  const movieStopScreen = useSelector(state => state.movieStopScreen)\n  const { success: stopSuccess } = movieStopScreen\n\n  const movieStartScreen = useSelector(state => state.movieStartScreen)\n  const { success: startSuccess } = movieStartScreen\n\n  useEffect(() => {\n    if (!listSuccess) {\n      dispatch(listCurrentMoviesForShows())\n    } else {\n      if (currentMovies.length === 0) {\n        setVal('No Movies Currently screening...')\n      } else {\n        setVal(currentMovies[0].refId.toString())\n      }\n    }\n  }, [dispatch, listSuccess, startSuccess, stopSuccess])\n\n  const isFormEmpty = () => {\n    return ticketCount === 0 || ticketPrice === 0\n  }\n\n  const isValidDate = () => {\n    const today = new Date()\n    if (today.getFullYear() > initialDate.getFullYear()) {\n      return false\n    } else if (today.getFullYear() < initialDate.getFullYear()) {\n      return true\n    } else {\n      if (today.getMonth() > initialDate.getMonth()) {\n        return false\n      } else if (today.getMonth() < initialDate.getMonth()) {\n        return true\n      } else {\n        if (today.getDate() > initialDate.getDate()) {\n          return false\n        } else {\n          return true\n        }\n      }\n    }\n  }\n\n  const isFormValid = () => {\n    if (isFormEmpty()) {\n      setMessage('Please fill out all fields...')\n      return false\n    } else if (!isValidDate()) {\n      setMessage('Enter a valid date...')\n      return false\n    } else {\n      return true\n    }\n  }\n\n  const getFormattedDate = date => {\n    const d = new Date(date)\n    let month = '' + (d.getMonth() + 1)\n    let day = '' + d.getDate()\n    let year = d.getFullYear()\n    if (month.length < 2) {\n      month = '0' + month\n    }\n    if (day.length < 2) {\n      day = '0' + day\n    }\n    return [year, month, day].join('-')\n  }\n\n  const submitHandler = e => {\n    e.preventDefault()\n\n    if (isFormValid()) {\n      setMessage(null)\n      const date = getFormattedDate(initialDate)\n      console.log(val)\n      const movie = currentMovies.filter(\n        mov => mov.refId.toString() === val.toString()\n      )[0]\n      console.log(movie)\n      dispatch(createShow(movie, date, ticketCount, ticketPrice))\n      setSuccess(true)\n    }\n  }\n\n  return (\n    <FormContainer>\n      <h3>Scehedule a new show</h3>\n      {error && <Message>{error}</Message>}\n      {message && <Message>{message}</Message>}\n      {success && (\n        <Message variant=\"success\">Successfully scheduled show</Message>\n      )}\n      {createError && <Message>{createError}</Message>}\n      {loading && <Loader />}\n      {val === 'No Movies Currently screening...' ? (\n        <Message variant=\"info\">{val}</Message>\n      ) : (\n        <Form onSubmit={submitHandler}>\n          <Form.Group>\n            <Form.Label>Select movie from the list</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={val}\n              onChange={e => setVal(e.target.value)}\n            >\n              {currentMovies &&\n                currentMovies.map(movie => (\n                  <option key={movie._id} value={movie.refId.toString()}>\n                    {movie.name}\n                  </option>\n                ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Select the date for the show</Form.Label>\n            <br />\n            <DatePicker\n              selected={initialDate}\n              onChange={date => setInitialDate(date)}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Enter total ticket count</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={ticketCount}\n              onChange={e => setTicketCount(e.target.valueAsNumber)}\n              placeholder=\"Ticket Count\"\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Enter cost of a single ticket</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={ticketPrice}\n              onChange={e => setTicketPrice(e.target.valueAsNumber)}\n              placeholder=\"Ticket Price\"\n            ></Form.Control>\n          </Form.Group>\n          <Button type=\"submit\" variant=\"primary\">\n            Schedule show\n          </Button>\n        </Form>\n      )}\n    </FormContainer>\n  )\n}\n\nexport default ShowAddPage\n","/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/InfectedPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/pages/ReportsPage.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/ProfitsPane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/MovieWisePane.js",[],"/Volumes/Samsung T5/Projects/popcorn/admin/src/panes/FlavourWisePane.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"212","replacedBy":"216"},{"ruleId":"214","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":19,"column":18,"nodeType":"220","messageId":"221","endLine":19,"endColumn":27},{"ruleId":"222","severity":1,"message":"223","line":45,"column":6,"nodeType":"224","endLine":45,"endColumn":56,"suggestions":"225"},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],["226"],["227"],"no-unused-vars","'setValues' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentMovies'. Either include it or remove the dependency array.","ArrayExpression",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},"Update the dependencies array to be: [currentMovies, dispatch, listSuccess, startSuccess, stopSuccess]",{"range":"231","text":"232"},[1676,1726],"[currentMovies, dispatch, listSuccess, startSuccess, stopSuccess]"]